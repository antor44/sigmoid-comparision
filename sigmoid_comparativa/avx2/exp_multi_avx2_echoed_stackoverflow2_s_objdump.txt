
exp_multi_avx2_echoed_stackoverflow2.o:     formato del fichero elf64-x86-64


Desensamblado de la secci√≥n .text:

0000000000000000 <run>:
        y      = _mm256_mul_ps(y, pow2n);
        return y;
}


void* run(void *received_Val){
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   rbp
    float p;
    float *xp;
    float *yp;

  for (r = 0; r < REIT; r++) {
    p = XXX + 0.00001*single_val*MAXSIZE/num_threads;
   5:	c5 f8 57 c0          	vxorps xmm0,xmm0,xmm0
    xp = xv + single_val*MAXSIZE/num_threads;
   9:	48 8d 35 00 00 00 00 	lea    rsi,[rip+0x0]        # 10 <run+0x10>
    yp = yv + single_val*MAXSIZE/num_threads;
  10:	48 8d 05 00 00 00 00 	lea    rax,[rip+0x0]        # 17 <run+0x17>

    for (i = single_val*MAXSIZE/num_threads; i < (single_val+1)*MAXSIZE/num_threads; i += 8) {
  17:	41 b8 a0 86 01 00    	mov    r8d,0x186a0
void* run(void *received_Val){
  1d:	48 89 e5             	mov    rbp,rsp
  20:	48 83 e4 e0          	and    rsp,0xffffffffffffffe0
  	int single_val = *((int *) received_Val);
  24:	44 8b 0f             	mov    r9d,DWORD PTR [rdi]
    p = XXX + 0.00001*single_val*MAXSIZE/num_threads;
  27:	c5 fb 10 3d 00 00 00 	vmovsd xmm7,QWORD PTR [rip+0x0]        # 2f <run+0x2f>
  2e:	00 
  2f:	c5 7c 28 3d 00 00 00 	vmovaps ymm15,YMMWORD PTR [rip+0x0]        # 37 <run+0x37>
  36:	00 
  37:	c5 7c 28 35 00 00 00 	vmovaps ymm14,YMMWORD PTR [rip+0x0]        # 3f <run+0x3f>
  3e:	00 
  3f:	c4 c1 7b 2a c1       	vcvtsi2sd xmm0,xmm0,r9d
  44:	c5 fb 59 05 00 00 00 	vmulsd xmm0,xmm0,QWORD PTR [rip+0x0]        # 4c <run+0x4c>
  4b:	00 
  4c:	c5 7c 28 2d 00 00 00 	vmovaps ymm13,YMMWORD PTR [rip+0x0]        # 54 <run+0x54>
  53:	00 
  54:	c5 fb 59 05 00 00 00 	vmulsd xmm0,xmm0,QWORD PTR [rip+0x0]        # 5c <run+0x5c>
  5b:	00 
    xp = xv + single_val*MAXSIZE/num_threads;
  5c:	45 69 c9 48 e8 01 00 	imul   r9d,r9d,0x1e848
  63:	c5 7c 28 25 00 00 00 	vmovaps ymm12,YMMWORD PTR [rip+0x0]        # 6b <run+0x6b>
  6a:	00 
  6b:	c5 7c 28 0d 00 00 00 	vmovaps ymm9,YMMWORD PTR [rip+0x0]        # 73 <run+0x73>
  72:	00 
  73:	c5 7d 6f 1d 00 00 00 	vmovdqa ymm11,YMMWORD PTR [rip+0x0]        # 7b <run+0x7b>
  7a:	00 
    p = XXX + 0.00001*single_val*MAXSIZE/num_threads;
  7b:	c4 e2 c1 99 05 00 00 	vfmadd132sd xmm0,xmm7,QWORD PTR [rip+0x0]        # 84 <run+0x84>
  82:	00 00 
  84:	c5 7c 28 15 00 00 00 	vmovaps ymm10,YMMWORD PTR [rip+0x0]        # 8c <run+0x8c>
  8b:	00 
    xp = xv + single_val*MAXSIZE/num_threads;
  8c:	49 63 c9             	movsxd rcx,r9d
    for (i = single_val*MAXSIZE/num_threads; i < (single_val+1)*MAXSIZE/num_threads; i += 8) {
  8f:	41 8d b9 48 e8 01 00 	lea    edi,[r9+0x1e848]
    xp = xv + single_val*MAXSIZE/num_threads;
  96:	48 c1 e1 02          	shl    rcx,0x2
  9a:	48 01 ce             	add    rsi,rcx
    yp = yv + single_val*MAXSIZE/num_threads;
  9d:	48 01 c1             	add    rcx,rax
    p = XXX + 0.00001*single_val*MAXSIZE/num_threads;
  a0:	c5 fb 5a f8          	vcvtsd2ss xmm7,xmm0,xmm0
  a4:	c5 fa 11 7c 24 fc    	vmovss DWORD PTR [rsp-0x4],xmm7
  aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  b0:	c5 fa 10 44 24 fc    	vmovss xmm0,DWORD PTR [rsp-0x4]
    for (i = single_val*MAXSIZE/num_threads; i < (single_val+1)*MAXSIZE/num_threads; i += 8) {
  b6:	44 89 ca             	mov    edx,r9d
  b9:	31 c0                	xor    eax,eax
  bb:	c5 f8 28 f8          	vmovaps xmm7,xmm0
  bf:	90                   	nop

      __m256 x = _mm256_setr_ps(p, p + 0.00001, p + 0.00002, p + 0.00003, p + 0.00004, p + 0.00005, p + 0.00006, p + 0.00007);
  c0:	c5 c2 5a cf          	vcvtss2sd xmm1,xmm7,xmm7
  c4:	c5 f3 58 15 00 00 00 	vaddsd xmm2,xmm1,QWORD PTR [rip+0x0]        # cc <run+0xcc>
  cb:	00 
    for (i = single_val*MAXSIZE/num_threads; i < (single_val+1)*MAXSIZE/num_threads; i += 8) {
  cc:	83 c2 08             	add    edx,0x8
      __m256 x = _mm256_setr_ps(p, p + 0.00001, p + 0.00002, p + 0.00003, p + 0.00004, p + 0.00005, p + 0.00006, p + 0.00007);
  cf:	c5 f3 58 1d 00 00 00 	vaddsd xmm3,xmm1,QWORD PTR [rip+0x0]        # d7 <run+0xd7>
  d6:	00 
  d7:	c5 f3 58 2d 00 00 00 	vaddsd xmm5,xmm1,QWORD PTR [rip+0x0]        # df <run+0xdf>
  de:	00 
  df:	c5 f3 58 35 00 00 00 	vaddsd xmm6,xmm1,QWORD PTR [rip+0x0]        # e7 <run+0xe7>
  e6:	00 
  e7:	c5 f3 58 25 00 00 00 	vaddsd xmm4,xmm1,QWORD PTR [rip+0x0]        # ef <run+0xef>
  ee:	00 
  ef:	c5 f3 58 05 00 00 00 	vaddsd xmm0,xmm1,QWORD PTR [rip+0x0]        # f7 <run+0xf7>
  f6:	00 
  f7:	c5 6b 5a c2          	vcvtsd2ss xmm8,xmm2,xmm2
  fb:	c5 f3 58 15 00 00 00 	vaddsd xmm2,xmm1,QWORD PTR [rip+0x0]        # 103 <run+0x103>
 102:	00 
 103:	c5 e3 5a db          	vcvtsd2ss xmm3,xmm3,xmm3
/* Create the vector [A B C D E F G H].  */
extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))
_mm256_set_ps (float __A, float __B, float __C, float __D,
	       float __E, float __F, float __G, float __H)
{
  return __extension__ (__m256){ __H, __G, __F, __E,
 107:	c5 c0 14 db          	vunpcklps xmm3,xmm7,xmm3
 10b:	c5 d3 5a ed          	vcvtsd2ss xmm5,xmm5,xmm5
 10f:	c5 cb 5a f6          	vcvtsd2ss xmm6,xmm6,xmm6
 113:	c5 d0 14 ee          	vunpcklps xmm5,xmm5,xmm6
      _mm256_store_ps(xp,x);
      _mm256_store_ps(yp,y);

      xp += 8;
      yp += 8;
      p += 0.00008;
 117:	c5 f3 58 0d 00 00 00 	vaddsd xmm1,xmm1,QWORD PTR [rip+0x0]        # 11f <run+0x11f>
 11e:	00 
      __m256 x = _mm256_setr_ps(p, p + 0.00001, p + 0.00002, p + 0.00003, p + 0.00004, p + 0.00005, p + 0.00006, p + 0.00007);
 11f:	c5 fb 5a c0          	vcvtsd2ss xmm0,xmm0,xmm0
 123:	c5 db 5a e4          	vcvtsd2ss xmm4,xmm4,xmm4
 127:	c5 d8 14 e0          	vunpcklps xmm4,xmm4,xmm0
 12b:	c5 e0 16 dd          	vmovlhps xmm3,xmm3,xmm5
 12f:	c5 eb 5a d2          	vcvtsd2ss xmm2,xmm2,xmm2
 133:	c5 b8 14 d2          	vunpcklps xmm2,xmm8,xmm2
 137:	c5 e8 16 c4          	vmovlhps xmm0,xmm2,xmm4
  return (__m256) ((__v8sf)__A + (__v8sf)__B);
 13b:	c5 fc 28 25 00 00 00 	vmovaps ymm4,YMMWORD PTR [rip+0x0]        # 143 <run+0x143>
 142:	00 
      p += 0.00008;
 143:	c5 f3 5a f9          	vcvtsd2ss xmm7,xmm1,xmm1
  return __extension__ (__m256){ __H, __G, __F, __E,
 147:	c4 e3 65 18 d8 01    	vinsertf128 ymm3,ymm3,xmm0,0x1
  return (__m256) __builtin_ia32_minps256 ((__v8sf)__A, (__v8sf)__B);
 14d:	c4 c1 64 5d c7       	vminps ymm0,ymm3,ymm15
  *(__m256 *)__P = __A;
 152:	c5 fc 29 1c 06       	vmovaps YMMWORD PTR [rsi+rax*1],ymm3
  return (__m256) __builtin_ia32_maxps256 ((__v8sf)__A, (__v8sf)__B);
 157:	c4 c1 7c 5f c6       	vmaxps ymm0,ymm0,ymm14
  return (__m256) ((__v8sf)__A * (__v8sf)__B);
 15c:	c4 c1 7c 59 d5       	vmulps ymm2,ymm0,ymm13
  return (__m256) __builtin_ia32_roundps256 ((__v8sf)__V, __M);
 161:	c4 e3 7d 08 d2 08    	vroundps ymm2,ymm2,0x8
  return (__m256) ((__v8sf)__A - (__v8sf)__B);
 167:	c4 c2 6d bc c4       	vfnmadd231ps ymm0,ymm2,ymm12
  return (__m256i)__builtin_ia32_cvttps2dq256 ((__v8sf) __A);
 16c:	c5 fe 5b d2          	vcvttps2dq ymm2,ymm2

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_add_epi32 (__m256i __A, __m256i __B)
{
  return (__m256i) ((__v8su)__A + (__v8su)__B);
 170:	c4 c1 6d fe d3       	vpaddd ymm2,ymm2,ymm11
  return (__m256) ((__v8sf)__A + (__v8sf)__B);
 175:	c4 e2 7d a8 25 00 00 	vfmadd213ps ymm4,ymm0,YMMWORD PTR [rip+0x0]        # 17e <run+0x17e>
 17c:	00 00 

extern __inline __m256i
__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))
_mm256_slli_epi32 (__m256i __A, int __B)
{
  return (__m256i)__builtin_ia32_pslldi256 ((__v8si)__A, __B);
 17e:	c5 ed 72 f2 17       	vpslld ymm2,ymm2,0x17
 183:	c4 e2 7d a8 25 00 00 	vfmadd213ps ymm4,ymm0,YMMWORD PTR [rip+0x0]        # 18c <run+0x18c>
 18a:	00 00 
 18c:	c4 e2 7d a8 25 00 00 	vfmadd213ps ymm4,ymm0,YMMWORD PTR [rip+0x0]        # 195 <run+0x195>
 193:	00 00 
 195:	c4 e2 7d a8 25 00 00 	vfmadd213ps ymm4,ymm0,YMMWORD PTR [rip+0x0]        # 19e <run+0x19e>
 19c:	00 00 
  return (__m256) ((__v8sf)__A * (__v8sf)__B);
 19e:	c5 fc 59 e8          	vmulps ymm5,ymm0,ymm0
  return (__m256) ((__v8sf)__A + (__v8sf)__B);
 1a2:	c4 e2 35 98 e0       	vfmadd132ps ymm4,ymm9,ymm0
 1a7:	c4 e2 55 b8 c4       	vfmadd231ps ymm0,ymm5,ymm4
 1ac:	c4 c1 7c 58 c2       	vaddps ymm0,ymm0,ymm10
  return (__m256) ((__v8sf)__A * (__v8sf)__B);
 1b1:	c5 fc 59 d2          	vmulps ymm2,ymm0,ymm2
  *(__m256 *)__P = __A;
 1b5:	c5 fc 29 14 01       	vmovaps YMMWORD PTR [rcx+rax*1],ymm2
    for (i = single_val*MAXSIZE/num_threads; i < (single_val+1)*MAXSIZE/num_threads; i += 8) {
 1ba:	48 83 c0 20          	add    rax,0x20
 1be:	39 d7                	cmp    edi,edx
 1c0:	0f 8f fa fe ff ff    	jg     c0 <run+0xc0>
  for (r = 0; r < REIT; r++) {
 1c6:	41 ff c8             	dec    r8d
 1c9:	0f 85 e1 fe ff ff    	jne    b0 <run+0xb0>

    }
  }

    return 0;
}
 1cf:	31 c0                	xor    eax,eax
 1d1:	c5 f8 77             	vzeroupper 
 1d4:	c9                   	leave  
 1d5:	c3                   	ret    
 1d6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 1dd:	00 00 00 

00000000000001e0 <exp256_ps>:
__m256 exp256_ps(__m256 x) {
 1e0:	f3 0f 1e fa          	endbr64 
  return (__m256) __builtin_ia32_minps256 ((__v8sf)__A, (__v8sf)__B);
 1e4:	c5 fc 5d 05 00 00 00 	vminps ymm0,ymm0,YMMWORD PTR [rip+0x0]        # 1ec <exp256_ps+0xc>
 1eb:	00 
  return (__m256) __builtin_ia32_maxps256 ((__v8sf)__A, (__v8sf)__B);
 1ec:	c5 fc 5f 05 00 00 00 	vmaxps ymm0,ymm0,YMMWORD PTR [rip+0x0]        # 1f4 <exp256_ps+0x14>
 1f3:	00 
  return (__m256) ((__v8sf)__A * (__v8sf)__B);
 1f4:	c5 fc 59 0d 00 00 00 	vmulps ymm1,ymm0,YMMWORD PTR [rip+0x0]        # 1fc <exp256_ps+0x1c>
 1fb:	00 
  return (__m256) ((__v8sf)__A + (__v8sf)__B);
 1fc:	c5 fc 28 15 00 00 00 	vmovaps ymm2,YMMWORD PTR [rip+0x0]        # 204 <exp256_ps+0x24>
 203:	00 
  return (__m256) __builtin_ia32_roundps256 ((__v8sf)__V, __M);
 204:	c4 e3 7d 08 c9 08    	vroundps ymm1,ymm1,0x8
  return (__m256) ((__v8sf)__A - (__v8sf)__B);
 20a:	c4 e2 75 bc 05 00 00 	vfnmadd231ps ymm0,ymm1,YMMWORD PTR [rip+0x0]        # 213 <exp256_ps+0x33>
 211:	00 00 
  return (__m256i)__builtin_ia32_cvttps2dq256 ((__v8sf) __A);
 213:	c5 fe 5b c9          	vcvttps2dq ymm1,ymm1
  return (__m256i) ((__v8su)__A + (__v8su)__B);
 217:	c5 f5 fe 0d 00 00 00 	vpaddd ymm1,ymm1,YMMWORD PTR [rip+0x0]        # 21f <exp256_ps+0x3f>
 21e:	00 
  return (__m256) ((__v8sf)__A + (__v8sf)__B);
 21f:	c4 e2 7d a8 15 00 00 	vfmadd213ps ymm2,ymm0,YMMWORD PTR [rip+0x0]        # 228 <exp256_ps+0x48>
 226:	00 00 
 228:	c4 e2 7d a8 15 00 00 	vfmadd213ps ymm2,ymm0,YMMWORD PTR [rip+0x0]        # 231 <exp256_ps+0x51>
 22f:	00 00 
  return (__m256i)__builtin_ia32_pslldi256 ((__v8si)__A, __B);
 231:	c5 f5 72 f1 17       	vpslld ymm1,ymm1,0x17
 236:	c4 e2 7d a8 15 00 00 	vfmadd213ps ymm2,ymm0,YMMWORD PTR [rip+0x0]        # 23f <exp256_ps+0x5f>
 23d:	00 00 
 23f:	c4 e2 7d a8 15 00 00 	vfmadd213ps ymm2,ymm0,YMMWORD PTR [rip+0x0]        # 248 <exp256_ps+0x68>
 246:	00 00 
  return (__m256) ((__v8sf)__A * (__v8sf)__B);
 248:	c5 fc 59 d8          	vmulps ymm3,ymm0,ymm0
  return (__m256) ((__v8sf)__A + (__v8sf)__B);
 24c:	c4 e2 7d a8 15 00 00 	vfmadd213ps ymm2,ymm0,YMMWORD PTR [rip+0x0]        # 255 <exp256_ps+0x75>
 253:	00 00 
 255:	c4 e2 65 b8 c2       	vfmadd231ps ymm0,ymm3,ymm2
 25a:	c5 fc 58 05 00 00 00 	vaddps ymm0,ymm0,YMMWORD PTR [rip+0x0]        # 262 <exp256_ps+0x82>
 261:	00 
  return (__m256) ((__v8sf)__A * (__v8sf)__B);
 262:	c5 fc 59 c1          	vmulps ymm0,ymm0,ymm1
}
 266:	c3                   	ret    

Desensamblado de la secci√≥n .text.startup:

0000000000000000 <main>:


int main(){
   0:	f3 0f 1e fa          	endbr64 
   4:	41 55                	push   r13
        fprintf(stderr, "Couldn't allocate memory for thread arg.\n");
        exit(1);
      }

      *arg = i;
      	pthread_create(&(tid[i]), NULL, run, arg);
   6:	4c 8d 2d 00 00 00 00 	lea    r13,[rip+0x0]        # d <main+0xd>
int main(){
   d:	41 54                	push   r12
   f:	55                   	push   rbp
    for (i=0;i<num_threads;i++){
  10:	31 ed                	xor    ebp,ebp
int main(){
  12:	53                   	push   rbx
  13:	48 83 ec 58          	sub    rsp,0x58
  17:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
  1e:	00 00 
  20:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
  25:	31 c0                	xor    eax,eax
    for (i=0;i<num_threads;i++){
  27:	48 89 e3             	mov    rbx,rsp
int main(){
  2a:	49 89 dc             	mov    r12,rbx
  2d:	0f 1f 00             	nop    DWORD PTR [rax]
      int *arg = malloc(sizeof(*arg));
  30:	bf 04 00 00 00       	mov    edi,0x4
  35:	e8 00 00 00 00       	call   3a <main+0x3a>
  3a:	48 89 c1             	mov    rcx,rax
      if ( arg == NULL ) {
  3d:	48 85 c0             	test   rax,rax
  40:	0f 84 a3 00 00 00    	je     e9 <main+0xe9>
      *arg = i;
  46:	89 28                	mov    DWORD PTR [rax],ebp
      	pthread_create(&(tid[i]), NULL, run, arg);
  48:	4c 89 e7             	mov    rdi,r12
  4b:	4c 89 ea             	mov    rdx,r13
  4e:	31 f6                	xor    esi,esi
    for (i=0;i<num_threads;i++){
  50:	ff c5                	inc    ebp
  52:	49 83 c4 08          	add    r12,0x8
      	pthread_create(&(tid[i]), NULL, run, arg);
  56:	e8 00 00 00 00       	call   5b <main+0x5b>
    for (i=0;i<num_threads;i++){
  5b:	83 fd 08             	cmp    ebp,0x8
  5e:	75 d0                	jne    30 <main+0x30>
  60:	48 8d 6b 40          	lea    rbp,[rbx+0x40]
  64:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
    }

    for(i=0; i<num_threads; i++)
    {
      	pthread_join(tid[i], NULL);
  68:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
  6b:	31 f6                	xor    esi,esi
  6d:	48 83 c3 08          	add    rbx,0x8
  71:	e8 00 00 00 00       	call   76 <main+0x76>
    for(i=0; i<num_threads; i++)
  76:	48 39 eb             	cmp    rbx,rbp
  79:	75 ed                	jne    68 <main+0x68>
  7b:	48 8d 1d 00 00 00 00 	lea    rbx,[rip+0x0]        # 82 <main+0x82>
  82:	c5 e8 57 d2          	vxorps xmm2,xmm2,xmm2
  86:	48 8d 2d 00 00 00 00 	lea    rbp,[rip+0x0]        # 8d <main+0x8d>
  8d:	4c 8d ab 00 09 3d 00 	lea    r13,[rbx+0x3d0900]
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  94:	4c 8d 25 00 00 00 00 	lea    r12,[rip+0x0]        # 9b <main+0x9b>
  9b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  a0:	c5 ea 5a 0b          	vcvtss2sd xmm1,xmm2,DWORD PTR [rbx]
  a4:	4c 89 e6             	mov    rsi,r12
  a7:	bf 01 00 00 00       	mov    edi,0x1
  ac:	b8 02 00 00 00       	mov    eax,0x2
  b1:	48 83 c3 04          	add    rbx,0x4
    }

    for (i=0;i<MAXSIZE;i++){
        printf("x=%.20f, e^x=%.20f\n",xv[i],yv[i]);
  b5:	c5 ea 5a 45 00       	vcvtss2sd xmm0,xmm2,DWORD PTR [rbp+0x0]
  ba:	48 83 c5 04          	add    rbp,0x4
  be:	e8 00 00 00 00       	call   c3 <main+0xc3>
    for (i=0;i<MAXSIZE;i++){
  c3:	4c 39 eb             	cmp    rbx,r13
  c6:	c5 e8 57 d2          	vxorps xmm2,xmm2,xmm2
  ca:	75 d4                	jne    a0 <main+0xa0>
              ((double)(yv[i])-exp((double)(xv[i])))/exp((double)(xv[i])) );
}
   */

    return 0;
}
  cc:	48 8b 44 24 48       	mov    rax,QWORD PTR [rsp+0x48]
  d1:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
  d8:	00 00 
  da:	75 34                	jne    110 <main+0x110>
  dc:	48 83 c4 58          	add    rsp,0x58
  e0:	31 c0                	xor    eax,eax
  e2:	5b                   	pop    rbx
  e3:	5d                   	pop    rbp
  e4:	41 5c                	pop    r12
  e6:	41 5d                	pop    r13
  e8:	c3                   	ret    
  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
  e9:	48 8b 0d 00 00 00 00 	mov    rcx,QWORD PTR [rip+0x0]        # f0 <main+0xf0>
  f0:	ba 29 00 00 00       	mov    edx,0x29
  f5:	be 01 00 00 00       	mov    esi,0x1
  fa:	48 8d 3d 00 00 00 00 	lea    rdi,[rip+0x0]        # 101 <main+0x101>
 101:	e8 00 00 00 00       	call   106 <main+0x106>
        exit(1);
 106:	bf 01 00 00 00       	mov    edi,0x1
 10b:	e8 00 00 00 00       	call   110 <main+0x110>
}
 110:	e8 00 00 00 00       	call   115 <.LC18+0x15>
